import tempfile
import os
import numpy as np
import bpy
import subprocess
import shutil
class PreviewMesh():
    def __init__(self):
        self.tempdir = tempfile.mkdtemp()
        os.mkdir(self.tempdir+'/constant')
        os.mkdir(self.tempdir+'/constant/polyMesh')
        os.mkdir(self.tempdir+'/system')
        os.mkdir(self.tempdir+'/0')
        cd = open(self.tempdir+'/system/controlDict','w')
        cd.write(\
        '''
/*--------------------------------*- C++ -*----------------------------------*/

// File was generated by SwiftBlock, a Blender 3D addon.

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


deltaT          1;

writeInterval   1;



// ************************************************************************* //        
        
''')

    def getPoints(self):
        convertfnc1 = lambda x: float(x[1:])
        convertfnc2 = lambda x:float(x[:-1])
        points = np.genfromtxt(self.tempdir + '/constant/polyMesh/points',skip_header=20,\
        skip_footer=2,converters={0:convertfnc1,2:convertfnc2},dtype=float)
        points=points.tolist()
        return points
    
    def getFaces(self):
        convertfnc1 = lambda x: int(x[2:])
        convertfnc2 = lambda x: int(x[:-1])
        faces = np.genfromtxt(self.tempdir + '/constant/polyMesh/faces',skip_header=20,\
        skip_footer=2,converters={0:convertfnc1,3:convertfnc2},dtype=int)
        faces=faces.tolist()
        return faces
        
    def deleteMesh(self):
         bpy.data.objects['swiftBlockObj']
         bpy.ops.object.select_all(action="DESELECT")
         bpy.ops.object.delete()
         self.blocking.hide = False
         self.blocking.select = True
         scn = bpy.context.scene
         scn.objects.active = self.blocking
         
    def generateMesh(self):
        subprocess.call(['blockMesh','-case',self.tempdir])
        blocking=bpy.context.active_object
        blocking.hide = True
        blocking.select = False
        mesh_data = bpy.data.meshes.new("swiftBlockMesh")
        self.previewMesh = bpy.data.objects.new('swiftBlockObj', mesh_data)
        self.previewMesh['swiftBlockObj'] = bpy.context.active_object.name
        scn = bpy.context.scene
        scn.objects.link(self.previewMesh)
        scn.objects.active = self.previewMesh
        self.previewMesh.select = True
        mesh_data.from_pydata(self.getPoints(), [], self.getFaces())
        mesh_data.update()
        shutil.rmtree(self.tempdir)